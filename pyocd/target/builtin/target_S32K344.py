# pyOCD debugger
# Copyright (c) 2023 NXP
# Copyright (c) 2025 Bryan Brauchler
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ..family.target_s32k3xx import S32K3XX
from ...core.memory_map import (FlashRegion, RamRegion, MemoryMap)

FLASH_ALGO = {
    'load_address' : 0x20000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x46024b09, 0xb5102100, 0x3003f859, 0xb1287a18, 0x4294681c, 0x685cd802, 0xd2044294, 0x330c3103,
    0xd1f3290c, 0xbd102000, 0x000000ac, 0x22304b18, 0xb5702100, 0x4003f859, 0xf0004620, 0x4b11fb03,
    0x07db6a9b, 0x4620d51b, 0x4c0f2300, 0x050cf242, 0xeb042601, 0x01591243, 0x2a005952, 0x4a0bda0c,
    0x440a300c, 0x68526811, 0x011ff021, 0x6c04f800, 0x2c08f840, 0x1c0cf840, 0x2b103301, 0x2000d1e9,
    0xbf00bd70, 0x4039c000, 0x40278000, 0x4027a000, 0x000000ac, 0x47702000, 0x4604b510, 0xffb0f7ff,
    0x4620b9a8, 0xf8fdf000, 0xf9d6f000, 0x2001b108, 0x4620bd10, 0xf82df000, 0xd1f82800, 0xf0004620,
    0xf000f8f0, 0x3800fa43, 0x2001bf18, 0x2000e7f0, 0xb570e7ee, 0x460d4604, 0xf7ff4616, 0xb108ff91,
    0xbd702001, 0xf0004620, 0xf000f8dc, 0x2800f9b5, 0x4632d1f6, 0x46204629, 0xf8aef000, 0xd1ef2800,
    0xf0004620, 0xf000f8ce, 0x3800fa21, 0x2001bf18, 0xb570e7e7, 0xf0004606, 0x4605f8be, 0x4630bb48,
    0xf98ef000, 0xbb204605, 0xf0004630, 0x4604fa87, 0xf0004630, 0xf04ffa7f, 0xf8c033ff, 0xf8c46300,
    0x68233100, 0x0330f023, 0x0310f043, 0x68236023, 0x0301f043, 0x68636023, 0xd5fc041a, 0x045b6863,
    0x6823d509, 0x0301f023, 0x68236023, 0x0330f023, 0x46286023, 0x2504bd70, 0xe92de7fb, 0x460741f0,
    0x4690460c, 0xf890f000, 0x28004605, 0x4638d155, 0xf956f000, 0x28004605, 0xf007d14f, 0x4423031f,
    0xd8552b80, 0xf0001938, 0x4605f94b, 0xd1442800, 0xf0004638, 0x4606fa43, 0xf0004638, 0xeb08fa3b,
    0xf8c00104, 0x46437300, 0x1f08462a, 0xd9374283, 0x0203f1a8, 0x429a1ecb, 0x0394ea4f, 0x0403f024,
    0x2400bf8a, 0x27002701, 0x0208eb04, 0xd90e4291, 0x30fff04f, 0x32014614, 0x42917824, 0x2000ea44,
    0x2f00d1f8, 0x2300bf08, 0xf8463340, 0x68330023, 0x7380f443, 0x68336033, 0x0301f043, 0x68736033,
    0xd5fc041a, 0x045b6873, 0x6833d514, 0x0301f023, 0x68336033, 0x7380f423, 0x46286033, 0x81f0e8bd,
    0x0740f102, 0xcb04f853, 0xf8463201, 0xe7bdc027, 0xe7f22507, 0xe7f02504, 0x41f0e92d, 0x460e4605,
    0x18574690, 0xd30245b8, 0xe8bd2000, 0xf02581f0, 0x19ab041f, 0x46284642, 0x2b7f1b1b, 0x1b64bf8a,
    0x34804634, 0xf7ff4621, 0x2800ff78, 0x4425d1ed, 0x44a01b36, 0xf3c0e7e6, 0x3800000c, 0x2001bf18,
    0xf36f4770, 0x4770000c, 0x001ff010, 0x2001bf18, 0x00004770, 0x447b4b48, 0xe92d681a, 0x2a0041f0,
    0x4b44d165, 0x49454694, 0x1e00f44f, 0x689e6898, 0x689d4479, 0x689c0f40, 0x5642f3c6, 0x3581f3c5,
    0xf3c44613, 0x055f1481, 0xf1014298, 0xf507010c, 0xd14f0780, 0x483a1c99, 0x0f00f1bc, 0x070cf04f,
    0x5141ea4f, 0xbf184478, 0xeb06461a, 0xfb070e03, 0xf04f0003, 0x460f0c00, 0x1880f44f, 0xf100459e,
    0xd13f000c, 0x5106eb01, 0x0f00f1bc, 0x4432d000, 0x260c482c, 0x4cc5eb01, 0x44782700, 0x2e00f44f,
    0x0003fb06, 0x4561461e, 0x000cf100, 0x1c6ed134, 0x442b441e, 0x442ab107, 0x210c4823, 0x5580f04f,
    0x3700f44f, 0xfb014478, 0xbb740003, 0xfb01481f, 0x3202f306, 0x46014478, 0x54ce4418, 0x5300f44f,
    0x51d8f04f, 0x1301e9c0, 0x447b4b19, 0x2000601a, 0x81f0e8bd, 0x3c0cf801, 0x0c01f04f, 0xe9413301,
    0xe7a07e02, 0x3c0cf800, 0x0c01f04f, 0xe9403301, 0xf5077802, 0xe7b11780, 0x6c0cf800, 0x36012701,
    0x1e02e940, 0x2100f501, 0x3c01e7bd, 0xe9c07003, 0xe7ca5701, 0x402ec000, 0x000004ce, 0x0000043c,
    0x00000408, 0x000003d2, 0x000003a8, 0x00000398, 0x000003fa, 0x4604b5f8, 0xf7ff460e, 0xb9b8ff5b,
    0x46054b0d, 0xc034f8df, 0x0e0cf04f, 0x44fc447b, 0xb2eb6819, 0xd8014299, 0xe0092003, 0xc303fb0e,
    0x4294685a, 0x689fd305, 0x4294443a, 0x6033d201, 0x3501bdf8, 0xbf00e7ed, 0x00000378, 0x000002fe,
    0x4604b513, 0xff36f7ff, 0xa901b918, 0xf7ff4620, 0xb002ffd1, 0x0000bd10, 0x4606b573, 0xff1bf7ff,
    0x28004604, 0xa901d141, 0xf7ff4630, 0x4604ffc3, 0xd13a2800, 0x46309b01, 0xf7ff685d, 0x9b01ff12,
    0x5fd8f1b0, 0x0505eba6, 0xd113689a, 0x2280f5c2, 0x20014b2d, 0xf8d3442a, 0x0b521358, 0xea214090,
    0xf8c30100, 0xf8d31358, 0x40d44358, 0x0401f004, 0xe01a00e4, 0xf5b2781b, 0xea4f2f80, 0xd8170383,
    0x4380f103, 0x21010b6d, 0x131af503, 0xf8d340a9, 0xea222340, 0xf8c30201, 0xf8d32340, 0xfa233340,
    0xf015f505, 0xd0000f01, 0x46202409, 0xbd70b002, 0x2180f5a2, 0xd91042a9, 0x4380f103, 0x21010c2d,
    0x131af503, 0xf8d340a9, 0xea22235c, 0xf8c30201, 0xf8d3235c, 0x40ec435c, 0xf5c2e7c8, 0xf1032280,
    0x20014380, 0xf503442a, 0x0b52131a, 0x1340f8d3, 0xea214090, 0xf8c30100, 0xf8d31340, 0x40d33340,
    0x0f01f013, 0xbf00e7cf, 0x40268000, 0x4606b573, 0xfea1f7ff, 0xbb204604, 0x4630a901, 0xff4af7ff,
    0xb9f04604, 0x46309b01, 0xf7ff685d, 0x9b01fe9a, 0x5fd8f1b0, 0x0505eba6, 0xd115689a, 0x2280f5c2,
    0x2301492b, 0xf8d1442a, 0x0b520358, 0x43034093, 0x3358f8c1, 0x4358f8d1, 0x43e440d4, 0x0401f004,
    0x462000e4, 0xbd70b002, 0xf5b2781b, 0xea4f2f80, 0xd8140383, 0x4380f103, 0x22010b6d, 0x131af503,
    0xf8d340aa, 0x430a1340, 0x2340f8c3, 0x3340f8d3, 0xf505fa23, 0x0f01f015, 0x2409d1e3, 0xf5a2e7e1,
    0x42a92180, 0xf103d90e, 0x0c2d4380, 0xf5032201, 0x40aa131a, 0x135cf8d3, 0xf8c3430a, 0xf8d3235c,
    0xe7e5335c, 0x2280f5c2, 0x4380f103, 0x442a2101, 0x131af503, 0xf8d30b52, 0x40910340, 0xf8c34301,
    0xf8d31340, 0x40d33340, 0x0f01f013, 0xbf00e7d4, 0x40268000, 0x47704800, 0x40268000, 0x47704800,
    0x402ec000, 0xb5300783, 0x1884d046, 0xe0044684, 0x1b01f803, 0xd004079d, 0x45a4469c, 0xd1f74663,
    0x3a01bd30, 0xeba24402, 0x2a03020c, 0xb2ccd929, 0x2404eb04, 0xeb042a0f, 0xd92f4404, 0x0c10f1a2,
    0x0c0ff02c, 0x0510f103, 0xe9c344ac, 0xe9c34400, 0x33104402, 0xd1f84563, 0x0f0cf012, 0x0e0ff002,
    0xf02ed018, 0x449c0c03, 0x0504f1ae, 0xf842461a, 0x45624b04, 0xf025d1fb, 0x33040403, 0x0203f00e,
    0x2a004423, 0xb2c9d0cc, 0xf803441a, 0x42931b01, 0xbd30d1fb, 0xe7f44672, 0xe7c64603, 0xe7e04696,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x000006e0, 0x00000000, 0x00000000, 0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x20000031,
    'pc_unInit': 0x20000099,
    'pc_program_page': 0x200000d7,
    'pc_erase_sector': 0x2000009d,
    'pc_eraseAll': 0x120000003,

    'static_base' : 0x20000000 + 0x00000004 + 0x000006e0,
    'begin_stack' : 0x200018b0,
    'end_stack' : 0x200008b0,
    'begin_data' : 0x20000000 + 0x1000,
    'page_size' : 0x80,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x200007b0,
        0x20000830
    ],
    'min_program_length' : 0x80,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x6e0,
    'rw_start': 0x6e4,
    'rw_size': 0xc0,
    'zi_start': 0x7a4,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x400000,
    'flash_size': 0x400000,
    'sector_sizes': (
        (0x0, 0x2000),
    )
}


class S32K344(S32K3XX):

    VENDOR = "NXP"

    MEMORY_MAP = MemoryMap(
        FlashRegion(name="pflash",  start=0x00400000, end=0x7fffff, blocksize=0x2000, page_size=FLASH_ALGO.get('page_size'), is_boot_memory=True, algo=FLASH_ALGO),
        FlashRegion(name="dflash",  start=0x10000000, end=0x1001ffff, blocksize=0x2000, page_size=FLASH_ALGO.get('page_size'), algo=FLASH_ALGO),
        RamRegion(name="itcm",      start=0x00000000, length=0x10000), # 64 KB
        RamRegion(name="dtcm",      start=0x20000000, length=0x20000), # 128 KB
        RamRegion(name="sram",      start=0x20400000, length=0x50000), # 320 KB
        )

    def __init__(self, session):
        super(S32K344, self).__init__(session, self.MEMORY_MAP)

    @property
    def core_ap_idx_array(self) -> list:
        return [S32K3XX.CM7_0_AHB_AP_IDX]

    def reset(self, reset_type=None):
        super(S32K344, self).reset(self.ResetType.SW_VECTRESET)

    def reset_and_halt(self, reset_type=None, map_to_user=True):
        super(S32K344, self).reset_and_halt(self.ResetType.SW_VECTRESET)

    def create_init_sequence(self):
        seq = super(S32K344, self).create_init_sequence()

        return seq
